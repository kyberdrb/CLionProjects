@startuml
'https://plantuml.com/class-diagram

class Client
hide Client members

Client *---> "1\ndocument" Document : owns
Client *--> "2 users:\n1 user, 1 admin" User : owns
Client .> UserRole

class Document {
    + Document(currentUser : User)
    + publish() : void
    + returnDocAfterReview() : void
    + expire() : void
    + changeStateTo(state : State) : void
    + getCurrentUser() : User
    + changeUser(otherUser : User) : void
    + dividerBeforeChangingPublisher() : string
    + whoIsPublishingDocument() : string
    + getInitialState() : string
    + getTransitionDetails() : string

    - _currentUser : User
    - states : States
    - _currentState : State
    - _previousState : State
    - transition : Transition
}

Document --> "2: previous and\ncurrent state" State : remembers
Document --> "1 _currentUser" User : belongs to
Document *--> "1 transition" Transition : keeps track of
Document ..> "1" TransitionType : uses
Document *--> "1 states" States : has

enum StateType {
    INIT
    DRAFT
    MODERATION
    PUBLISHED
}

hide StateType methods

class States {
    + States(document : Document)
    + getInitialState() : State
    + getDraftState() : State
    + getModerationState() : State
    + getPublishedState() : State

    - _document : Document
    - map<StateType, State>  states
}

States --> "1" StateType : uses for each state\nas unique key
States *--> "2..* states" State : stores

/'States *--> InitialState
States *--> Draft
States *--> Moderation
States *--> Published'/

abstract class State {
    + State(document : Document)

    + publish() : void
    + returnDocAfterReview() : void
    + expire() : void

  - {abstract} publishImplementation() : void
  - {abstract} returnDocAfterReviewImplementation() : void
  - {abstract} expireImplementation() : void

  + getTransitionType() : TransitionType

  + {abstract} ~State()

  + ostream operator<<(\n\
  out : ostream,\n\
  state : State)

    # _document : Document
    - transitionType : TransitionType
}

State --> "1 _document" Document : changes to further states via
State --> "1 transitionType" TransitionType : sets with\neach transition

State <|-- InitialState
State <|-- Draft
State <|-- Moderation
State <|-- Published

class InitialState
hide InitialState members

class Draft
hide Draft members

class Moderation
hide Moderation members

class Published
hide Published members

class Transition {
    + Transition(\n\
  sourceState : State,\n\
  destinationState : State)

    + ostream operator<<(\n\
  out : ostream,\n\
  transition : Transition)

    - _sourceState : State
    - _destinationState : State
}

Transition -> "2" State : remembers

enum TransitionType {
    NONE
    PUBLISH
    RETURN_DOC_AFTER_REVIEW
    EXPIRE
}

hide TransitionType methods

class User {
    + User(userRole : UserRole)
    + isAdmin() : bool

    + ostream operator<<(\n\
      out : ostream,\n\
      user : User)

    - _role : UserRole
}

User -> "1" UserRole : has

enum UserRole {
    USER
    ADMIN
}

hide UserRole methods

@enduml
clear
