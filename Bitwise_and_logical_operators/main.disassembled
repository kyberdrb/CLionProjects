	.file	"main.cpp"
# GNU C++14 (Arch Linux 9.3.0-1) version 9.3.0 (x86_64-pc-linux-gnu)
#	compiled by GNU C version 9.3.0, GMP version 6.2.0, MPFR version 4.0.2, MPC version 1.1.0, isl version isl-0.21-GMP

# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed:  -D_GNU_SOURCE main.cpp -mtune=generic -march=x86-64
# -auxbase-strip main.disassembled -g -fverbose-asm
# options enabled:  -fPIC -fPIE -faggressive-loop-optimizations
# -fassume-phsa -fasynchronous-unwind-tables -fauto-inc-dec -fcommon
# -fdelete-null-pointer-checks -fdwarf2-cfi-asm -fearly-inlining
# -feliminate-unused-debug-types -fexceptions -ffp-int-builtin-inexact
# -ffunction-cse -fgcse-lm -fgnu-runtime -fgnu-unique -fident
# -finline-atomics -fipa-stack-alignment -fira-hoist-pressure
# -fira-share-save-slots -fira-share-spill-slots -fivopts
# -fkeep-static-consts -fleading-underscore -flifetime-dse
# -flto-odr-type-merging -fmath-errno -fmerge-debug-strings -fpeephole
# -fplt -fprefetch-loop-arrays -freg-struct-return
# -fsched-critical-path-heuristic -fsched-dep-count-heuristic
# -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
# -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
# -fsched-stalled-insns-dep -fschedule-fusion -fsemantic-interposition
# -fshow-column -fshrink-wrap-separate -fsigned-zeros
# -fsplit-ivs-in-unroller -fssa-backprop -fstack-protector-strong
# -fstdarg-opt -fstrict-volatile-bitfields -fsync-libcalls -ftrapping-math
# -ftree-cselim -ftree-forwprop -ftree-loop-if-convert -ftree-loop-im
# -ftree-loop-ivcanon -ftree-loop-optimize -ftree-parallelize-loops=
# -ftree-phiprop -ftree-reassoc -ftree-scev-cprop -funit-at-a-time
# -funwind-tables -fverbose-asm -fzero-initialized-in-bss
# -m128bit-long-double -m64 -m80387 -malign-stringops
# -mavx256-split-unaligned-load -mavx256-split-unaligned-store
# -mfancy-math-387 -mfp-ret-in-387 -mfxsr -mglibc -mieee-fp
# -mlong-double-80 -mmmx -mno-sse4 -mpush-args -mred-zone -msse -msse2
# -mstv -mtls-direct-seg-refs -mvzeroupper

	.text
.Ltext0:
	.section	.rodata
.LC0:
	.string	"int main()"
.LC1:
	.string	"main.cpp"
.LC2:
	.string	"b == 0"
.LC3:
	.string	"k == 2"
	.align 8
.LC4:
	.string	"initialization:\ni = 5\nj = 3\nb = false\nk = 7 -> variable 'k' is set to value '7' after each computation of variable 'b'\n"
	.align 8
.LC5:
	.string	"b = (i - 5) & (k = i - j):\tb = %d\tk = %d\n"
	.align 8
.LC6:
	.string	"\tRight operand will be evaluated and variable 'k' computed\n\tbecause operator '&' evaluates both operands with right-to-left associativity"
.LC7:
	.string	"k != 2"
.LC8:
	.string	"k == 7"
	.align 8
.LC9:
	.string	"b = (i - 5) && (k = i - j):\tb = %d\tk = %d\n"
	.align 8
.LC10:
	.string	"\tThe evaluation of the right operand and the computation of the variable 'k' will be skipped\n\tbecause operator '&&' skipps the evaluation of the right operand\n\twhen the left side is false, i.e. equals to 0"
	.align 8
.LC11:
	.string	"b = (k = i - j) &  (i - 5):\tb = %d\tk = %d\n"
	.align 8
.LC12:
	.string	"b = (k = i - j) && (i - 5):\tb = %d\tk = %d\n"
	.align 8
.LC13:
	.string	"b = (i - 5) |  (k = i - j):\tb = %d\tk = %d\n"
	.align 8
.LC14:
	.string	"b = (i - 5) || (k = i - j):\tb = %d\tk = %d\n"
	.align 8
.LC15:
	.string	"b = (k = i - j) |  (i - 5):\tb = %d\tk = %d\n"
	.align 8
.LC16:
	.string	"b = (k = i - j) || (i - 5):\tb = %d\tk = %d\n"
.LC17:
	.string	"%d; %d\n"
	.text
	.globl	main
	.type	main, @function
main:
.LFB0:
	.file 1 "main.cpp"
	.loc 1 11 12
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
# main.cpp:11: int main() {
	.loc 1 11 12
	movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp160
	movq	%rax, -8(%rbp)	# tmp160, D.2899
	xorl	%eax, %eax	# tmp160
# main.cpp:12:     int i = 5;
	.loc 1 12 9
	movl	$5, -24(%rbp)	#, i
# main.cpp:13:     int j = 3;
	.loc 1 13 9
	movl	$3, -20(%rbp)	#, j
# main.cpp:14:     int k = 0;
	.loc 1 14 9
	movl	$0, -28(%rbp)	#, k
# main.cpp:15:     bool b = false;
	.loc 1 15 10
	movb	$0, -29(%rbp)	#, b
# main.cpp:17:     k = 7;
	.loc 1 17 7
	movl	$7, -28(%rbp)	#, k
# main.cpp:18:     b = (i - 5) & (k = i - j);
	.loc 1 18 12
	movl	-24(%rbp), %eax	# i, tmp109
	leal	-5(%rax), %edx	#, _1
# main.cpp:18:     b = (i - 5) & (k = i - j);
	.loc 1 18 22
	movl	-24(%rbp), %eax	# i, tmp113
	subl	-20(%rbp), %eax	# j, tmp112
	movl	%eax, -28(%rbp)	# tmp112, k
# main.cpp:18:     b = (i - 5) & (k = i - j);
	.loc 1 18 17
	movl	%edx, %eax	# _1, _1
	andl	-28(%rbp), %eax	# k, _1
# main.cpp:18:     b = (i - 5) & (k = i - j);
	.loc 1 18 7
	testl	%eax, %eax	# _2
	setne	%al	#, tmp114
	movb	%al, -29(%rbp)	# tmp114, b
# main.cpp:19:     assert(b == 0);
	.loc 1 19 5
	movzbl	-29(%rbp), %eax	# b, _3
	testl	%eax, %eax	# _3
	je	.L2	#,
# main.cpp:19:     assert(b == 0);
	.loc 1 19 5 is_stmt 0 discriminator 1
	leaq	.LC0(%rip), %rcx	#,
	movl	$19, %edx	#,
	leaq	.LC1(%rip), %rsi	#,
	leaq	.LC2(%rip), %rdi	#,
	call	__assert_fail@PLT	#
.L2:
# main.cpp:20:     assert(k == 2);
	.loc 1 20 5 is_stmt 1
	cmpl	$2, -28(%rbp)	#, k
	je	.L3	#,
# main.cpp:20:     assert(k == 2);
	.loc 1 20 5 is_stmt 0 discriminator 1
	leaq	.LC0(%rip), %rcx	#,
	movl	$20, %edx	#,
	leaq	.LC1(%rip), %rsi	#,
	leaq	.LC3(%rip), %rdi	#,
	call	__assert_fail@PLT	#
.L3:
# main.cpp:21:     printf( "initialization:\n"
	.loc 1 21 11 is_stmt 1
	leaq	.LC4(%rip), %rdi	#,
	call	puts@PLT	#
# main.cpp:26:     printf("b = (i - 5) & (k = i - j):\tb = %d\tk = %d\n", b, k);
	.loc 1 26 11
	movzbl	-29(%rbp), %eax	# b, _4
	movl	-28(%rbp), %edx	# k, tmp115
	movl	%eax, %esi	# _4,
	leaq	.LC5(%rip), %rdi	#,
	movl	$0, %eax	#,
	call	printf@PLT	#
# main.cpp:27:     printf( "\tRight operand will be evaluated and variable 'k' computed\n"
	.loc 1 27 11
	leaq	.LC6(%rip), %rdi	#,
	call	puts@PLT	#
# main.cpp:30:     printf("\n");
	.loc 1 30 11
	movl	$10, %edi	#,
	call	putchar@PLT	#
# main.cpp:32:     k = 7;
	.loc 1 32 7
	movl	$7, -28(%rbp)	#, k
# main.cpp:33:     b = (i - 5) && (k = i - j);
	.loc 1 33 17
	cmpl	$5, -24(%rbp)	#, i
	je	.L4	#,
# main.cpp:33:     b = (i - 5) && (k = i - j);
	.loc 1 33 23 discriminator 1
	movl	-24(%rbp), %eax	# i, tmp119
	subl	-20(%rbp), %eax	# j, tmp118
	movl	%eax, -28(%rbp)	# tmp118, k
# main.cpp:33:     b = (i - 5) && (k = i - j);
	.loc 1 33 17 discriminator 1
	cmpl	$0, -28(%rbp)	#, k
	je	.L4	#,
# main.cpp:33:     b = (i - 5) && (k = i - j);
	.loc 1 33 17 is_stmt 0 discriminator 3
	movl	$1, %eax	#, iftmp.0_26
	jmp	.L5	#
.L4:
# main.cpp:33:     b = (i - 5) && (k = i - j);
	.loc 1 33 17 discriminator 4
	movl	$0, %eax	#, iftmp.0_26
.L5:
# main.cpp:33:     b = (i - 5) && (k = i - j);
	.loc 1 33 7 is_stmt 1 discriminator 6
	movb	%al, -29(%rbp)	# iftmp.0_26, b
# main.cpp:34:     assert(b == 0);
	.loc 1 34 5 discriminator 6
	movzbl	-29(%rbp), %eax	# b, _5
	testl	%eax, %eax	# _5
	je	.L6	#,
# main.cpp:34:     assert(b == 0);
	.loc 1 34 5 is_stmt 0 discriminator 1
	leaq	.LC0(%rip), %rcx	#,
	movl	$34, %edx	#,
	leaq	.LC1(%rip), %rsi	#,
	leaq	.LC2(%rip), %rdi	#,
	call	__assert_fail@PLT	#
.L6:
# main.cpp:35:     assert(k != 2);
	.loc 1 35 5 is_stmt 1
	cmpl	$2, -28(%rbp)	#, k
	jne	.L7	#,
# main.cpp:35:     assert(k != 2);
	.loc 1 35 5 is_stmt 0 discriminator 1
	leaq	.LC0(%rip), %rcx	#,
	movl	$35, %edx	#,
	leaq	.LC1(%rip), %rsi	#,
	leaq	.LC7(%rip), %rdi	#,
	call	__assert_fail@PLT	#
.L7:
# main.cpp:36:     assert(k == 7);
	.loc 1 36 5 is_stmt 1
	cmpl	$7, -28(%rbp)	#, k
	je	.L8	#,
# main.cpp:36:     assert(k == 7);
	.loc 1 36 5 is_stmt 0 discriminator 1
	leaq	.LC0(%rip), %rcx	#,
	movl	$36, %edx	#,
	leaq	.LC1(%rip), %rsi	#,
	leaq	.LC8(%rip), %rdi	#,
	call	__assert_fail@PLT	#
.L8:
# main.cpp:37:     printf("b = (i - 5) && (k = i - j):\tb = %d\tk = %d\n", b, k);
	.loc 1 37 11 is_stmt 1
	movzbl	-29(%rbp), %eax	# b, _6
	movl	-28(%rbp), %edx	# k, tmp120
	movl	%eax, %esi	# _6,
	leaq	.LC9(%rip), %rdi	#,
	movl	$0, %eax	#,
	call	printf@PLT	#
# main.cpp:38:     printf( "\tThe evaluation of the right operand and the computation of the variable 'k' will be skipped\n"
	.loc 1 38 11
	leaq	.LC10(%rip), %rdi	#,
	call	puts@PLT	#
# main.cpp:42:     printf("\n");
	.loc 1 42 11
	movl	$10, %edi	#,
	call	putchar@PLT	#
# main.cpp:44:     k = 7;
	.loc 1 44 7
	movl	$7, -28(%rbp)	#, k
# main.cpp:45:     b = (k = i - j) & (i - 5);
	.loc 1 45 12
	movl	-24(%rbp), %eax	# i, tmp124
	subl	-20(%rbp), %eax	# j, tmp123
	movl	%eax, -28(%rbp)	# tmp123, k
# main.cpp:45:     b = (k = i - j) & (i - 5);
	.loc 1 45 26
	movl	-24(%rbp), %eax	# i, tmp125
	subl	$5, %eax	#, _7
# main.cpp:45:     b = (k = i - j) & (i - 5);
	.loc 1 45 21
	andl	-28(%rbp), %eax	# k, _8
# main.cpp:45:     b = (k = i - j) & (i - 5);
	.loc 1 45 7
	testl	%eax, %eax	# _8
	setne	%al	#, tmp126
	movb	%al, -29(%rbp)	# tmp126, b
# main.cpp:46:     printf("b = (k = i - j) &  (i - 5):\tb = %d\tk = %d\n", b, k);
	.loc 1 46 11
	movzbl	-29(%rbp), %eax	# b, _9
	movl	-28(%rbp), %edx	# k, tmp127
	movl	%eax, %esi	# _9,
	leaq	.LC11(%rip), %rdi	#,
	movl	$0, %eax	#,
	call	printf@PLT	#
# main.cpp:48:     k = 7;
	.loc 1 48 7
	movl	$7, -28(%rbp)	#, k
# main.cpp:49:     b = (k = i - j) && (i - 5);
	.loc 1 49 12
	movl	-24(%rbp), %eax	# i, tmp131
	subl	-20(%rbp), %eax	# j, tmp130
	movl	%eax, -28(%rbp)	# tmp130, k
# main.cpp:49:     b = (k = i - j) && (i - 5);
	.loc 1 49 21
	cmpl	$0, -28(%rbp)	#, k
	je	.L9	#,
# main.cpp:49:     b = (k = i - j) && (i - 5);
	.loc 1 49 21 is_stmt 0 discriminator 1
	cmpl	$5, -24(%rbp)	#, i
	je	.L9	#,
# main.cpp:49:     b = (k = i - j) && (i - 5);
	.loc 1 49 21 discriminator 3
	movl	$1, %eax	#, iftmp.1_27
	jmp	.L10	#
.L9:
# main.cpp:49:     b = (k = i - j) && (i - 5);
	.loc 1 49 21 discriminator 4
	movl	$0, %eax	#, iftmp.1_27
.L10:
# main.cpp:49:     b = (k = i - j) && (i - 5);
	.loc 1 49 7 is_stmt 1 discriminator 6
	movb	%al, -29(%rbp)	# iftmp.1_27, b
# main.cpp:50:     printf("b = (k = i - j) && (i - 5):\tb = %d\tk = %d\n", b, k);
	.loc 1 50 11 discriminator 6
	movzbl	-29(%rbp), %eax	# b, _10
	movl	-28(%rbp), %edx	# k, tmp132
	movl	%eax, %esi	# _10,
	leaq	.LC12(%rip), %rdi	#,
	movl	$0, %eax	#,
	call	printf@PLT	#
# main.cpp:52:     printf("\n");
	.loc 1 52 11 discriminator 6
	movl	$10, %edi	#,
	call	putchar@PLT	#
# main.cpp:54:     k = 7;
	.loc 1 54 7 discriminator 6
	movl	$7, -28(%rbp)	#, k
# main.cpp:55:     b = (i - 5) | (k = i - j);
	.loc 1 55 12 discriminator 6
	movl	-24(%rbp), %eax	# i, tmp133
	leal	-5(%rax), %edx	#, _11
# main.cpp:55:     b = (i - 5) | (k = i - j);
	.loc 1 55 22 discriminator 6
	movl	-24(%rbp), %eax	# i, tmp137
	subl	-20(%rbp), %eax	# j, tmp136
	movl	%eax, -28(%rbp)	# tmp136, k
# main.cpp:55:     b = (i - 5) | (k = i - j);
	.loc 1 55 17 discriminator 6
	movl	%edx, %eax	# _11, _11
	orl	-28(%rbp), %eax	# k, _11
# main.cpp:55:     b = (i - 5) | (k = i - j);
	.loc 1 55 7 discriminator 6
	testl	%eax, %eax	# _12
	setne	%al	#, tmp138
	movb	%al, -29(%rbp)	# tmp138, b
# main.cpp:56:     printf("b = (i - 5) |  (k = i - j):\tb = %d\tk = %d\n", b, k);
	.loc 1 56 11 discriminator 6
	movzbl	-29(%rbp), %eax	# b, _13
	movl	-28(%rbp), %edx	# k, tmp139
	movl	%eax, %esi	# _13,
	leaq	.LC13(%rip), %rdi	#,
	movl	$0, %eax	#,
	call	printf@PLT	#
# main.cpp:58:     k = 7;
	.loc 1 58 7 discriminator 6
	movl	$7, -28(%rbp)	#, k
# main.cpp:59:     b = (i - 5) || (k = i - j);
	.loc 1 59 17 discriminator 6
	cmpl	$5, -24(%rbp)	#, i
	jne	.L11	#,
# main.cpp:59:     b = (i - 5) || (k = i - j);
	.loc 1 59 23 discriminator 2
	movl	-24(%rbp), %eax	# i, tmp143
	subl	-20(%rbp), %eax	# j, tmp142
	movl	%eax, -28(%rbp)	# tmp142, k
# main.cpp:59:     b = (i - 5) || (k = i - j);
	.loc 1 59 17 discriminator 2
	cmpl	$0, -28(%rbp)	#, k
	je	.L12	#,
.L11:
# main.cpp:59:     b = (i - 5) || (k = i - j);
	.loc 1 59 17 is_stmt 0 discriminator 3
	movl	$1, %eax	#, iftmp.2_28
	jmp	.L13	#
.L12:
# main.cpp:59:     b = (i - 5) || (k = i - j);
	.loc 1 59 17 discriminator 4
	movl	$0, %eax	#, iftmp.2_28
.L13:
# main.cpp:59:     b = (i - 5) || (k = i - j);
	.loc 1 59 7 is_stmt 1 discriminator 6
	movb	%al, -29(%rbp)	# iftmp.2_28, b
# main.cpp:60:     printf("b = (i - 5) || (k = i - j):\tb = %d\tk = %d\n", b, k);
	.loc 1 60 11 discriminator 6
	movzbl	-29(%rbp), %eax	# b, _14
	movl	-28(%rbp), %edx	# k, tmp144
	movl	%eax, %esi	# _14,
	leaq	.LC14(%rip), %rdi	#,
	movl	$0, %eax	#,
	call	printf@PLT	#
# main.cpp:62:     k = 7;
	.loc 1 62 7 discriminator 6
	movl	$7, -28(%rbp)	#, k
# main.cpp:63:     b = (k = i - j) | (i - 5);
	.loc 1 63 12 discriminator 6
	movl	-24(%rbp), %eax	# i, tmp148
	subl	-20(%rbp), %eax	# j, tmp147
	movl	%eax, -28(%rbp)	# tmp147, k
# main.cpp:63:     b = (k = i - j) | (i - 5);
	.loc 1 63 26 discriminator 6
	movl	-24(%rbp), %eax	# i, tmp149
	subl	$5, %eax	#, _15
# main.cpp:63:     b = (k = i - j) | (i - 5);
	.loc 1 63 21 discriminator 6
	orl	-28(%rbp), %eax	# k, _16
# main.cpp:63:     b = (k = i - j) | (i - 5);
	.loc 1 63 7 discriminator 6
	testl	%eax, %eax	# _16
	setne	%al	#, tmp150
	movb	%al, -29(%rbp)	# tmp150, b
# main.cpp:64:     printf("b = (k = i - j) |  (i - 5):\tb = %d\tk = %d\n", b, k);
	.loc 1 64 11 discriminator 6
	movzbl	-29(%rbp), %eax	# b, _17
	movl	-28(%rbp), %edx	# k, tmp151
	movl	%eax, %esi	# _17,
	leaq	.LC15(%rip), %rdi	#,
	movl	$0, %eax	#,
	call	printf@PLT	#
# main.cpp:66:     k = 7;
	.loc 1 66 7 discriminator 6
	movl	$7, -28(%rbp)	#, k
# main.cpp:67:     b = (k = i - j) || (i - 5);
	.loc 1 67 12 discriminator 6
	movl	-24(%rbp), %eax	# i, tmp155
	subl	-20(%rbp), %eax	# j, tmp154
	movl	%eax, -28(%rbp)	# tmp154, k
# main.cpp:67:     b = (k = i - j) || (i - 5);
	.loc 1 67 21 discriminator 6
	cmpl	$0, -28(%rbp)	#, k
	jne	.L14	#,
# main.cpp:67:     b = (k = i - j) || (i - 5);
	.loc 1 67 21 is_stmt 0 discriminator 2
	cmpl	$5, -24(%rbp)	#, i
	je	.L15	#,
.L14:
# main.cpp:67:     b = (k = i - j) || (i - 5);
	.loc 1 67 21 discriminator 3
	movl	$1, %eax	#, iftmp.3_29
	jmp	.L16	#
.L15:
# main.cpp:67:     b = (k = i - j) || (i - 5);
	.loc 1 67 21 discriminator 4
	movl	$0, %eax	#, iftmp.3_29
.L16:
# main.cpp:67:     b = (k = i - j) || (i - 5);
	.loc 1 67 7 is_stmt 1 discriminator 6
	movb	%al, -29(%rbp)	# iftmp.3_29, b
# main.cpp:68:     printf("b = (k = i - j) || (i - 5):\tb = %d\tk = %d\n", b, k);
	.loc 1 68 11 discriminator 6
	movzbl	-29(%rbp), %eax	# b, _18
	movl	-28(%rbp), %edx	# k, tmp156
	movl	%eax, %esi	# _18,
	leaq	.LC16(%rip), %rdi	#,
	movl	$0, %eax	#,
	call	printf@PLT	#
# main.cpp:71:     rv = evaluateLogicalExpression();
	.loc 1 71 36 discriminator 6
	call	_Z25evaluateLogicalExpressionv	#
	movq	%rax, -16(%rbp)	# tmp158, rv
# main.cpp:72:     printf("%d; %d\n", rv.b, rv.k);
	.loc 1 72 11 discriminator 6
	movl	-12(%rbp), %edx	# rv.k, _19
# main.cpp:72:     printf("%d; %d\n", rv.b, rv.k);
	.loc 1 72 27 discriminator 6
	movzbl	-16(%rbp), %eax	# rv.b, _20
# main.cpp:72:     printf("%d; %d\n", rv.b, rv.k);
	.loc 1 72 11 discriminator 6
	movzbl	%al, %eax	# _20, _21
	movl	%eax, %esi	# _21,
	leaq	.LC17(%rip), %rdi	#,
	movl	$0, %eax	#,
	call	printf@PLT	#
# main.cpp:74:     return 0;
	.loc 1 74 12 discriminator 6
	movl	$0, %eax	#, _89
# main.cpp:75: }
	.loc 1 75 1 discriminator 6
	movq	-8(%rbp), %rcx	# D.2899, tmp161
	xorq	%fs:40, %rcx	# MEM[(<address-space-1> long unsigned int *)40B], tmp161
	je	.L18	#,
# main.cpp:75: }
	.loc 1 75 1 is_stmt 0
	call	__stack_chk_fail@PLT	#
.L18:
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE0:
	.size	main, .-main
	.globl	_Z25evaluateLogicalExpressionv
	.type	_Z25evaluateLogicalExpressionv, @function
_Z25evaluateLogicalExpressionv:
.LFB1:
	.loc 1 77 41 is_stmt 1
	.cfi_startproc
	pushq	%rbp	#
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp	#,
	.cfi_def_cfa_register 6
	subq	$32, %rsp	#,
# main.cpp:77: ReturnValue evaluateLogicalExpression() {
	.loc 1 77 41
	movq	%fs:40, %rax	# MEM[(<address-space-1> long unsigned int *)40B], tmp92
	movq	%rax, -8(%rbp)	# tmp92, D.2919
	xorl	%eax, %eax	# tmp92
# main.cpp:79:     int i = 5;
	.loc 1 79 9
	movl	$5, -28(%rbp)	#, i
# main.cpp:80:     int j = 3;
	.loc 1 80 9
	movl	$3, -24(%rbp)	#, j
# main.cpp:81:     int k = 7;
	.loc 1 81 9
	movl	$7, -20(%rbp)	#, k
# main.cpp:82:     bool b = (k = i - j) || (i - 5);
	.loc 1 82 17
	movl	-28(%rbp), %eax	# i, tmp88
	subl	-24(%rbp), %eax	# j, tmp87
	movl	%eax, -20(%rbp)	# tmp87, k
# main.cpp:82:     bool b = (k = i - j) || (i - 5);
	.loc 1 82 26
	cmpl	$0, -20(%rbp)	#, k
	jne	.L20	#,
# main.cpp:82:     bool b = (k = i - j) || (i - 5);
	.loc 1 82 26 is_stmt 0 discriminator 2
	cmpl	$5, -28(%rbp)	#, i
	je	.L21	#,
.L20:
# main.cpp:82:     bool b = (k = i - j) || (i - 5);
	.loc 1 82 26 discriminator 3
	movl	$1, %eax	#, iftmp.4_1
	jmp	.L22	#
.L21:
# main.cpp:82:     bool b = (k = i - j) || (i - 5);
	.loc 1 82 26 discriminator 4
	movl	$0, %eax	#, iftmp.4_1
.L22:
# main.cpp:82:     bool b = (k = i - j) || (i - 5);
	.loc 1 82 35 is_stmt 1 discriminator 6
	movb	%al, -29(%rbp)	# iftmp.4_1, b
# main.cpp:83:     returnValue.b = b;
	.loc 1 83 19 discriminator 6
	movzbl	-29(%rbp), %eax	# b, tmp89
	movb	%al, -16(%rbp)	# tmp89, returnValue.b
# main.cpp:84:     returnValue.k = k;
	.loc 1 84 19 discriminator 6
	movl	-20(%rbp), %eax	# k, tmp90
	movl	%eax, -12(%rbp)	# tmp90, returnValue.k
# main.cpp:85:     return returnValue;
	.loc 1 85 12 discriminator 6
	movq	-16(%rbp), %rax	# returnValue, D.2894
# main.cpp:86: }
	.loc 1 86 1 discriminator 6
	movq	-8(%rbp), %rdx	# D.2919, tmp93
	xorq	%fs:40, %rdx	# MEM[(<address-space-1> long unsigned int *)40B], tmp93
	je	.L24	#,
# main.cpp:86: }
	.loc 1 86 1 is_stmt 0
	call	__stack_chk_fail@PLT	#
.L24:
	leave	
	.cfi_def_cfa 7, 8
	ret	
	.cfi_endproc
.LFE1:
	.size	_Z25evaluateLogicalExpressionv, .-_Z25evaluateLogicalExpressionv
.Letext0:
	.file 2 "/usr/lib/gcc/x86_64-pc-linux-gnu/9.3.0/include/stddef.h"
	.file 3 "/usr/include/bits/types.h"
	.file 4 "/usr/include/bits/types/struct_FILE.h"
	.file 5 "/usr/include/bits/types/FILE.h"
	.file 6 "/usr/include/stdio.h"
	.file 7 "/usr/include/bits/sys_errlist.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x414
	.value	0x4
	.long	.Ldebug_abbrev0
	.byte	0x8
	.uleb128 0x1
	.long	.LASF55
	.byte	0x4
	.long	.LASF56
	.long	.LASF57
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.long	.Ldebug_line0
	.uleb128 0x2
	.long	.LASF7
	.byte	0x2
	.byte	0xd1
	.byte	0x17
	.long	0x39
	.uleb128 0x3
	.byte	0x8
	.byte	0x7
	.long	.LASF0
	.uleb128 0x3
	.byte	0x4
	.byte	0x7
	.long	.LASF1
	.uleb128 0x4
	.byte	0x8
	.uleb128 0x3
	.byte	0x1
	.byte	0x8
	.long	.LASF2
	.uleb128 0x3
	.byte	0x2
	.byte	0x7
	.long	.LASF3
	.uleb128 0x3
	.byte	0x1
	.byte	0x6
	.long	.LASF4
	.uleb128 0x3
	.byte	0x2
	.byte	0x5
	.long	.LASF5
	.uleb128 0x5
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x3
	.byte	0x8
	.byte	0x5
	.long	.LASF6
	.uleb128 0x2
	.long	.LASF8
	.byte	0x3
	.byte	0x98
	.byte	0x19
	.long	0x6c
	.uleb128 0x2
	.long	.LASF9
	.byte	0x3
	.byte	0x99
	.byte	0x1b
	.long	0x6c
	.uleb128 0x6
	.byte	0x8
	.long	0x91
	.uleb128 0x3
	.byte	0x1
	.byte	0x6
	.long	.LASF10
	.uleb128 0x7
	.long	0x91
	.uleb128 0x8
	.long	.LASF51
	.byte	0xd8
	.byte	0x4
	.byte	0x31
	.byte	0x8
	.long	0x224
	.uleb128 0x9
	.long	.LASF11
	.byte	0x4
	.byte	0x33
	.byte	0x7
	.long	0x65
	.byte	0
	.uleb128 0x9
	.long	.LASF12
	.byte	0x4
	.byte	0x36
	.byte	0x9
	.long	0x8b
	.byte	0x8
	.uleb128 0x9
	.long	.LASF13
	.byte	0x4
	.byte	0x37
	.byte	0x9
	.long	0x8b
	.byte	0x10
	.uleb128 0x9
	.long	.LASF14
	.byte	0x4
	.byte	0x38
	.byte	0x9
	.long	0x8b
	.byte	0x18
	.uleb128 0x9
	.long	.LASF15
	.byte	0x4
	.byte	0x39
	.byte	0x9
	.long	0x8b
	.byte	0x20
	.uleb128 0x9
	.long	.LASF16
	.byte	0x4
	.byte	0x3a
	.byte	0x9
	.long	0x8b
	.byte	0x28
	.uleb128 0x9
	.long	.LASF17
	.byte	0x4
	.byte	0x3b
	.byte	0x9
	.long	0x8b
	.byte	0x30
	.uleb128 0x9
	.long	.LASF18
	.byte	0x4
	.byte	0x3c
	.byte	0x9
	.long	0x8b
	.byte	0x38
	.uleb128 0x9
	.long	.LASF19
	.byte	0x4
	.byte	0x3d
	.byte	0x9
	.long	0x8b
	.byte	0x40
	.uleb128 0x9
	.long	.LASF20
	.byte	0x4
	.byte	0x40
	.byte	0x9
	.long	0x8b
	.byte	0x48
	.uleb128 0x9
	.long	.LASF21
	.byte	0x4
	.byte	0x41
	.byte	0x9
	.long	0x8b
	.byte	0x50
	.uleb128 0x9
	.long	.LASF22
	.byte	0x4
	.byte	0x42
	.byte	0x9
	.long	0x8b
	.byte	0x58
	.uleb128 0x9
	.long	.LASF23
	.byte	0x4
	.byte	0x44
	.byte	0x16
	.long	0x23d
	.byte	0x60
	.uleb128 0x9
	.long	.LASF24
	.byte	0x4
	.byte	0x46
	.byte	0x14
	.long	0x243
	.byte	0x68
	.uleb128 0x9
	.long	.LASF25
	.byte	0x4
	.byte	0x48
	.byte	0x7
	.long	0x65
	.byte	0x70
	.uleb128 0x9
	.long	.LASF26
	.byte	0x4
	.byte	0x49
	.byte	0x7
	.long	0x65
	.byte	0x74
	.uleb128 0x9
	.long	.LASF27
	.byte	0x4
	.byte	0x4a
	.byte	0xb
	.long	0x73
	.byte	0x78
	.uleb128 0x9
	.long	.LASF28
	.byte	0x4
	.byte	0x4d
	.byte	0x12
	.long	0x50
	.byte	0x80
	.uleb128 0x9
	.long	.LASF29
	.byte	0x4
	.byte	0x4e
	.byte	0xf
	.long	0x57
	.byte	0x82
	.uleb128 0x9
	.long	.LASF30
	.byte	0x4
	.byte	0x4f
	.byte	0x8
	.long	0x249
	.byte	0x83
	.uleb128 0x9
	.long	.LASF31
	.byte	0x4
	.byte	0x51
	.byte	0xf
	.long	0x259
	.byte	0x88
	.uleb128 0x9
	.long	.LASF32
	.byte	0x4
	.byte	0x59
	.byte	0xd
	.long	0x7f
	.byte	0x90
	.uleb128 0x9
	.long	.LASF33
	.byte	0x4
	.byte	0x5b
	.byte	0x17
	.long	0x264
	.byte	0x98
	.uleb128 0x9
	.long	.LASF34
	.byte	0x4
	.byte	0x5c
	.byte	0x19
	.long	0x26f
	.byte	0xa0
	.uleb128 0x9
	.long	.LASF35
	.byte	0x4
	.byte	0x5d
	.byte	0x14
	.long	0x243
	.byte	0xa8
	.uleb128 0x9
	.long	.LASF36
	.byte	0x4
	.byte	0x5e
	.byte	0x9
	.long	0x47
	.byte	0xb0
	.uleb128 0x9
	.long	.LASF37
	.byte	0x4
	.byte	0x5f
	.byte	0xa
	.long	0x2d
	.byte	0xb8
	.uleb128 0x9
	.long	.LASF38
	.byte	0x4
	.byte	0x60
	.byte	0x7
	.long	0x65
	.byte	0xc0
	.uleb128 0x9
	.long	.LASF39
	.byte	0x4
	.byte	0x62
	.byte	0x8
	.long	0x275
	.byte	0xc4
	.byte	0
	.uleb128 0x2
	.long	.LASF40
	.byte	0x5
	.byte	0x7
	.byte	0x19
	.long	0x9d
	.uleb128 0xa
	.long	.LASF58
	.byte	0x4
	.byte	0x2b
	.byte	0xe
	.uleb128 0xb
	.long	.LASF41
	.uleb128 0x6
	.byte	0x8
	.long	0x238
	.uleb128 0x6
	.byte	0x8
	.long	0x9d
	.uleb128 0xc
	.long	0x91
	.long	0x259
	.uleb128 0xd
	.long	0x39
	.byte	0
	.byte	0
	.uleb128 0x6
	.byte	0x8
	.long	0x230
	.uleb128 0xb
	.long	.LASF42
	.uleb128 0x6
	.byte	0x8
	.long	0x25f
	.uleb128 0xb
	.long	.LASF43
	.uleb128 0x6
	.byte	0x8
	.long	0x26a
	.uleb128 0xc
	.long	0x91
	.long	0x285
	.uleb128 0xd
	.long	0x39
	.byte	0x13
	.byte	0
	.uleb128 0x6
	.byte	0x8
	.long	0x98
	.uleb128 0x7
	.long	0x285
	.uleb128 0xe
	.long	.LASF44
	.byte	0x6
	.byte	0x89
	.byte	0xe
	.long	0x29c
	.uleb128 0x6
	.byte	0x8
	.long	0x224
	.uleb128 0xe
	.long	.LASF45
	.byte	0x6
	.byte	0x8a
	.byte	0xe
	.long	0x29c
	.uleb128 0xe
	.long	.LASF46
	.byte	0x6
	.byte	0x8b
	.byte	0xe
	.long	0x29c
	.uleb128 0xe
	.long	.LASF47
	.byte	0x7
	.byte	0x1a
	.byte	0xc
	.long	0x65
	.uleb128 0xc
	.long	0x28b
	.long	0x2d1
	.uleb128 0xf
	.byte	0
	.uleb128 0xe
	.long	.LASF48
	.byte	0x7
	.byte	0x1b
	.byte	0x1a
	.long	0x2c6
	.uleb128 0xe
	.long	.LASF49
	.byte	0x7
	.byte	0x1e
	.byte	0xc
	.long	0x65
	.uleb128 0xe
	.long	.LASF50
	.byte	0x7
	.byte	0x1f
	.byte	0x1a
	.long	0x2c6
	.uleb128 0x8
	.long	.LASF52
	.byte	0x8
	.byte	0x1
	.byte	0x4
	.byte	0x8
	.long	0x319
	.uleb128 0x10
	.string	"b"
	.byte	0x1
	.byte	0x5
	.byte	0xa
	.long	0x319
	.byte	0
	.uleb128 0x10
	.string	"k"
	.byte	0x1
	.byte	0x6
	.byte	0x9
	.long	0x65
	.byte	0x4
	.byte	0
	.uleb128 0x3
	.byte	0x1
	.byte	0x2
	.long	.LASF53
	.uleb128 0x11
	.long	.LASF59
	.byte	0x1
	.byte	0x4d
	.byte	0xd
	.long	.LASF60
	.long	0x2f5
	.quad	.LFB1
	.quad	.LFE1-.LFB1
	.uleb128 0x1
	.byte	0x9c
	.long	0x38a
	.uleb128 0x12
	.long	.LASF54
	.byte	0x1
	.byte	0x4e
	.byte	0x11
	.long	0x2f5
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.uleb128 0x13
	.string	"i"
	.byte	0x1
	.byte	0x4f
	.byte	0x9
	.long	0x65
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x13
	.string	"j"
	.byte	0x1
	.byte	0x50
	.byte	0x9
	.long	0x65
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x13
	.string	"k"
	.byte	0x1
	.byte	0x51
	.byte	0x9
	.long	0x65
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x13
	.string	"b"
	.byte	0x1
	.byte	0x52
	.byte	0xa
	.long	0x319
	.uleb128 0x2
	.byte	0x91
	.sleb128 -45
	.byte	0
	.uleb128 0x14
	.long	.LASF61
	.byte	0x1
	.byte	0xb
	.byte	0x5
	.long	0x65
	.quad	.LFB0
	.quad	.LFE0-.LFB0
	.uleb128 0x1
	.byte	0x9c
	.long	0x402
	.uleb128 0x13
	.string	"i"
	.byte	0x1
	.byte	0xc
	.byte	0x9
	.long	0x65
	.uleb128 0x2
	.byte	0x91
	.sleb128 -40
	.uleb128 0x13
	.string	"j"
	.byte	0x1
	.byte	0xd
	.byte	0x9
	.long	0x65
	.uleb128 0x2
	.byte	0x91
	.sleb128 -36
	.uleb128 0x13
	.string	"k"
	.byte	0x1
	.byte	0xe
	.byte	0x9
	.long	0x65
	.uleb128 0x2
	.byte	0x91
	.sleb128 -44
	.uleb128 0x13
	.string	"b"
	.byte	0x1
	.byte	0xf
	.byte	0xa
	.long	0x319
	.uleb128 0x2
	.byte	0x91
	.sleb128 -45
	.uleb128 0x15
	.long	.LASF62
	.long	0x412
	.uleb128 0x9
	.byte	0x3
	.quad	.LC0
	.uleb128 0x13
	.string	"rv"
	.byte	0x1
	.byte	0x46
	.byte	0x11
	.long	0x2f5
	.uleb128 0x2
	.byte	0x91
	.sleb128 -32
	.byte	0
	.uleb128 0xc
	.long	0x98
	.long	0x412
	.uleb128 0xd
	.long	0x39
	.byte	0xa
	.byte	0
	.uleb128 0x7
	.long	0x402
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x1b
	.uleb128 0xe
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x13
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x1
	.byte	0x1
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x21
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2f
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x21
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x6e
	.uleb128 0xe
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x14
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x39
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x15
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x34
	.uleb128 0x19
	.uleb128 0x6c
	.uleb128 0x19
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_aranges,"",@progbits
	.long	0x2c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.Ltext0
	.quad	.Letext0-.Ltext0
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF19:
	.string	"_IO_buf_end"
.LASF26:
	.string	"_flags2"
.LASF27:
	.string	"_old_offset"
.LASF47:
	.string	"sys_nerr"
.LASF22:
	.string	"_IO_save_end"
.LASF5:
	.string	"short int"
.LASF7:
	.string	"size_t"
.LASF32:
	.string	"_offset"
.LASF62:
	.string	"__PRETTY_FUNCTION__"
.LASF16:
	.string	"_IO_write_ptr"
.LASF11:
	.string	"_flags"
.LASF18:
	.string	"_IO_buf_base"
.LASF23:
	.string	"_markers"
.LASF13:
	.string	"_IO_read_end"
.LASF36:
	.string	"_freeres_buf"
.LASF53:
	.string	"bool"
.LASF50:
	.string	"_sys_errlist"
.LASF46:
	.string	"stderr"
.LASF41:
	.string	"_IO_marker"
.LASF31:
	.string	"_lock"
.LASF6:
	.string	"long int"
.LASF28:
	.string	"_cur_column"
.LASF49:
	.string	"_sys_nerr"
.LASF51:
	.string	"_IO_FILE"
.LASF54:
	.string	"returnValue"
.LASF2:
	.string	"unsigned char"
.LASF4:
	.string	"signed char"
.LASF33:
	.string	"_codecvt"
.LASF60:
	.string	"_Z25evaluateLogicalExpressionv"
.LASF1:
	.string	"unsigned int"
.LASF55:
	.string	"GNU C++14 9.3.0 -mtune=generic -march=x86-64 -g"
.LASF30:
	.string	"_shortbuf"
.LASF15:
	.string	"_IO_write_base"
.LASF39:
	.string	"_unused2"
.LASF12:
	.string	"_IO_read_ptr"
.LASF3:
	.string	"short unsigned int"
.LASF10:
	.string	"char"
.LASF61:
	.string	"main"
.LASF34:
	.string	"_wide_data"
.LASF35:
	.string	"_freeres_list"
.LASF37:
	.string	"__pad5"
.LASF52:
	.string	"ReturnValue"
.LASF42:
	.string	"_IO_codecvt"
.LASF0:
	.string	"long unsigned int"
.LASF17:
	.string	"_IO_write_end"
.LASF9:
	.string	"__off64_t"
.LASF8:
	.string	"__off_t"
.LASF24:
	.string	"_chain"
.LASF43:
	.string	"_IO_wide_data"
.LASF21:
	.string	"_IO_backup_base"
.LASF44:
	.string	"stdin"
.LASF57:
	.string	"/home/laptop/CLionProjects/Bitwise_and_logical_operators"
.LASF38:
	.string	"_mode"
.LASF14:
	.string	"_IO_read_base"
.LASF29:
	.string	"_vtable_offset"
.LASF20:
	.string	"_IO_save_base"
.LASF48:
	.string	"sys_errlist"
.LASF25:
	.string	"_fileno"
.LASF40:
	.string	"FILE"
.LASF59:
	.string	"evaluateLogicalExpression"
.LASF56:
	.string	"main.cpp"
.LASF45:
	.string	"stdout"
.LASF58:
	.string	"_IO_lock_t"
	.ident	"GCC: (Arch Linux 9.3.0-1) 9.3.0"
	.section	.note.GNU-stack,"",@progbits
